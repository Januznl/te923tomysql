#!/usr/bin/env php
<?php

chdir(realpath(__DIR__."/../"));

require 'vendor/autoload.php';

use TE923ToMysql\Command;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\EventDispatcher\EventDispatcher;
use Symfony\Component\Console\Event\ConsoleExceptionEvent;
use Symfony\Component\Console\Event\ConsoleCommandEvent;
use Symfony\Component\Console\ConsoleEvents;
use Aura\Di\ContainerBuilder;

$builder = new ContainerBuilder;
$container = $builder->newInstance(
    array(),
    array('TE923ToMysql\Lib\Config\DIConfig'),
    ContainerBuilder::ENABLE_AUTO_RESOLVE
);


$dispatcher = new EventDispatcher();

$dispatcher->addListener(ConsoleEvents::EXCEPTION, function (ConsoleExceptionEvent $event) {
    $output = $event->getOutput();

    $command = $event->getCommand();

    $output->writeln(sprintf('Oops, exception thrown while running command <info>%s</info>', $command->getName()));

    // get the current exit code (the exception code or the exit code set by a ConsoleEvents::TERMINATE event)
    $exitCode = $event->getExitCode();

    // change the exception to another one
    //$event->setException(new \LogicException('Caught exception', $exitCode, $event->getException()));
});


$dispatcher->addListener(ConsoleEvents::COMMAND, function (ConsoleCommandEvent $event) use ($container)  {
    // get the input instance
    $input = $event->getInput();

    // get the output instance
    $output = $event->getOutput();

    // get the command to be executed
    $command = $event->getCommand();

    /**
     * hack to get arguments/options available in event "console.command"
     * @see https://github.com/symfony/symfony/issues/10695
     */
    $command->mergeApplicationDefinition();
    $input->bind($command->getDefinition());
    // end of hack

    if ($input->hasOption('config')) {
        $path = $input->getOption('config');
        /** @var \TE923ToMysql\Lib\Config\Config $config */
        $config = $container->get('config.settings');
        $config->setConfigPath($path);

    }

    // get the application
    $application = $command->getApplication();
});

$app = new Application('TE923ToMysql', '0.1-dev');

//Add dispatcher
$app->setDispatcher($dispatcher);

//Add global options
$app->getDefinition()->addOptions([
    new InputOption('--config', '-c', InputOption::VALUE_REQUIRED, 'Path to the configuration file', ''),
]);

//Add commands
$app->add(new Command\HelloCommand());
$app->add(new Command\DoctrineCommand($container));

//Run application
$app->run();
